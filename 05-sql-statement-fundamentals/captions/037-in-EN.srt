00:00:01,350 --> 00:00:07,140
Hello everyone and welcome to the in statement lecture in this lecture we're going to learn about the

00:00:07,190 --> 00:00:12,390
in statement and how to use it and we also get a very brief introduction to something known as a sub

00:00:12,390 --> 00:00:16,280
query well-discussed so queries in much more detail later on.

00:00:16,560 --> 00:00:21,220
But right now we'll just learn about them as a brief introduction where we're learning about the end

00:00:21,290 --> 00:00:23,190
statements.

00:00:23,250 --> 00:00:30,340
So what is the in statements you can use the in operator with the WHERE clause to check if a value matches

00:00:30,360 --> 00:00:32,600
any value in a list of values.

00:00:32,670 --> 00:00:35,340
So the syntax of an operator looks like this.

00:00:35,340 --> 00:00:38,910
You say value that would be the column you're looking for.

00:00:38,910 --> 00:00:44,970
So that column value in and then you have parentheses and a list of values.

00:00:45,330 --> 00:00:52,320
So the expression returns true to value matches and the value of the list value one value 2 etc. and

00:00:52,320 --> 00:00:57,870
the list of values is not limit to a list of numbers or strings but also the result of a set of select

00:00:57,870 --> 00:00:58,580
statements.

00:00:58,590 --> 00:01:00,910
And so this would actually be a sub query.

00:01:01,020 --> 00:01:03,780
You could say value in and and you print the CS.

00:01:03,780 --> 00:01:05,850
You actually have a sub query.

00:01:05,850 --> 00:01:11,090
So select value from table name will go over some queries in much more detail later on.

00:01:11,100 --> 00:01:15,960
But I want you to be aware of it in case you're looking at statements on your own somewhere else you

00:01:15,960 --> 00:01:20,280
may see this show up just like between.

00:01:20,280 --> 00:01:24,780
You can use the not operator to adjust and in statement so you can say something like.

00:01:24,810 --> 00:01:31,350
Not in the list of values but let's go ahead and see some use case examples so you can get a better

00:01:31,350 --> 00:01:34,050
idea of how to actually use that in his statements.

00:01:34,320 --> 00:01:34,760
OK.

00:01:34,920 --> 00:01:37,840
Go ahead and jump to Peachi Adam now.

00:01:38,970 --> 00:01:44,340
OK so here we are at Peachi admin I'm going to go ahead and click DVD rental and then select execute

00:01:44,400 --> 00:01:50,300
arbitrary series query or sequel queries sorry and get to the sequel editor.

00:01:50,470 --> 00:01:50,870
OK.

00:01:50,880 --> 00:01:53,820
So let's go ahead and review are in.

00:01:53,820 --> 00:01:57,500
OPERATOR And how do you use that in statements.

00:01:57,660 --> 00:02:03,090
So I'm going to go ahead and mess around with the rental table.

00:02:03,090 --> 00:02:08,880
So let's just go ahead and check out what the rental table looks like and to say select everything from

00:02:08,940 --> 00:02:15,870
rental and then I'm going to say limits just once we can just we can see what columns you have available

00:02:15,870 --> 00:02:16,760
to us.

00:02:16,860 --> 00:02:23,610
So we have the rental I.D. the rental dates inventory ID customer id return date step ID and then the

00:02:23,610 --> 00:02:24,840
last update.

00:02:25,230 --> 00:02:33,660
So suppose I want to know the rental information of a customer ID 1 and 2 so I could use the in operator

00:02:34,140 --> 00:02:35,510
as follows.

00:02:35,790 --> 00:02:36,810
I could do something like this.

00:02:36,810 --> 00:02:46,230
I would say let's just do a couple of columns Hirose selects customer id call them so select the rental

00:02:46,230 --> 00:02:47,470
Id call them.

00:02:47,610 --> 00:02:50,930
And finally the return they call them.

00:02:51,150 --> 00:03:00,350
So I'm selecting those three columns from rental and then this is where we're going to use the inside

00:03:01,200 --> 00:03:03,080
operator or in statements.

00:03:03,330 --> 00:03:08,510
I don't want to only get rental information for customer IDs 1 and 2.

00:03:08,540 --> 00:03:09,440
Can I do that.

00:03:09,630 --> 00:03:13,110
I can say where customer ID.

00:03:13,380 --> 00:03:20,460
Basically the value column in and in print CS I'll start passing in the list of values I want and notice

00:03:20,460 --> 00:03:22,180
the sequel.

00:03:22,770 --> 00:03:25,090
Ed. actually highlights your list.

00:03:25,090 --> 00:03:30,090
Here are sin tax purposes so you can see a highlighted.

00:03:30,090 --> 00:03:35,050
Once I have finished my list so our customer I.D. is in one and two.

00:03:35,670 --> 00:03:46,250
And let's go ahead and do an order by just to add on to this or say order by return dates descending

00:03:46,380 --> 00:03:51,030
so we can start to flush out what a real SQL query would actually look like when we add a lot of moving

00:03:51,030 --> 00:03:53,560
parts to it and let's go ahead and run this.

00:03:53,610 --> 00:03:54,790
So what we get out.

00:03:55,350 --> 00:03:55,870
OK.

00:03:56,040 --> 00:04:03,750
So here we have Frenzel information for customer IDs where their customer is either in one or two of

00:04:03,750 --> 00:04:04,780
that rental ID.

00:04:04,800 --> 00:04:11,070
So that idea that specific renting transaction and then the return date in descending order.

00:04:11,070 --> 00:04:11,620
All right.

00:04:11,910 --> 00:04:16,500
So let's say I wanted to get everything that was not customer 1 or 2.

00:04:16,680 --> 00:04:24,740
I couldn't say not in one 2 then run that and I'll get everything else that wasn't there.

00:04:24,770 --> 00:04:30,990
You know this is actually quite a few rows so just keep that in mind and let's go ahead and just show

00:04:31,290 --> 00:04:34,530
one more example of in here.

00:04:34,530 --> 00:04:42,860
So I could say let's say maybe I'm looking for a couple of IDS like 7 13 and 10.

00:04:42,930 --> 00:04:46,270
So if I run that now I get 7 or 13 and 10.

00:04:46,320 --> 00:04:53,910
So this really nice because it allows you to search for specific row values or column values I should

00:04:53,910 --> 00:05:00,360
say where the column he calls a particular value but you can now do it in a way that you don't have

00:05:00,360 --> 00:05:01,750
to be in sequential order.

00:05:01,800 --> 00:05:07,470
So the between statements and those comparison operators which is greater than or equal or less than

00:05:07,470 --> 00:05:15,080
or equal to etc. Those usually had a deal some sort of range like between 1 and 5 for less than 10 etc.

00:05:15,160 --> 00:05:15,390
.

00:05:15,450 --> 00:05:19,870
Now I can actually just put a list of specific values using the in statement.

00:05:19,890 --> 00:05:22,630
So that's going to be really convenient.

00:05:22,680 --> 00:05:27,720
And so what I can actually think of this as is basically a series of or statements.

00:05:27,720 --> 00:05:34,620
So I'm basically saying this and it's just a cleaner way of writing this so let's say I'm saying we're

00:05:34,640 --> 00:05:45,570
customary in seven 13 10 that list this exact same thing as if I was just writing several equal statements

00:05:45,570 --> 00:05:45,630
.

00:05:45,630 --> 00:06:03,620
If I was saying or customary the equal seven or customer id equal 13 or customer id equal 10.

00:06:03,720 --> 00:06:07,020
So that's actually the same thing as that in statement.

00:06:07,020 --> 00:06:13,260
So remember the between statement when we're showing various ways of rewriting them with comparison

00:06:13,260 --> 00:06:18,780
operators here if I run this this is actually the exact same thing of just using an in state and off

00:06:18,780 --> 00:06:19,730
the list.

00:06:19,740 --> 00:06:22,860
So you'll notice that use in statement is a lot nicer.

00:06:22,860 --> 00:06:29,640
So the operator is shorter and more readable than a query that uses a bunch of or statements like this

00:06:29,640 --> 00:06:30,210
.

00:06:30,390 --> 00:06:35,830
And what's actually really nice is that postscripts sequel will execute the query with the in operator

00:06:35,840 --> 00:06:35,860
.

00:06:35,880 --> 00:06:38,340
Much faster than the same kuri.

00:06:38,340 --> 00:06:41,760
That is a list of or operations like this.

00:06:41,760 --> 00:06:46,110
So if you ever find yourself doing something like that you should really be thinking about using an

00:06:46,200 --> 00:06:49,940
in statement for both readability readability and speed.

00:06:50,160 --> 00:06:56,170
So this should just be in and then the list of values so let's just say one two three.

00:06:56,550 --> 00:06:57,470
Run that.

00:06:57,470 --> 00:07:02,490
And here we have customer IDs that are equal to one two or three.

00:07:02,490 --> 00:07:04,920
OK let's just go ahead and do one more example.

00:07:05,040 --> 00:07:08,070
Let's go ahead and check up the payment table see finger.

00:07:08,070 --> 00:07:14,110
Any good data from there saw sullenness select everything from payments.

00:07:14,130 --> 00:07:17,000
What say limit one.

00:07:17,070 --> 00:07:18,440
Go ahead and run that.

00:07:18,960 --> 00:07:23,680
So here you have customer id staff ID rental ID an amount.

00:07:23,700 --> 00:07:34,270
So let's go out and say select all the columns from payments where the amounts is in.

00:07:35,040 --> 00:07:46,120
And let's go ahead and say seven ninety nine and also eight ninety nine.

00:07:46,140 --> 00:07:48,950
Let's go ahead and run that.

00:07:48,960 --> 00:07:54,720
So now I have all the rental values where the amount was either 7 9 9 or 8 9 9.

00:07:54,870 --> 00:07:59,430
And you notice again this is a lot more readable than having a bunch of or statements with the equal

00:07:59,530 --> 00:08:01,060
clauses there.

00:08:01,200 --> 00:08:03,440
And it also runs a lot faster.

00:08:03,480 --> 00:08:10,290
So great use cases here for N and we'll see them a lot more throughout our challenges and the rest of

00:08:10,290 --> 00:08:15,750
the SQL queries as we combine all these little tools we're learning to build out really nice strong

00:08:15,750 --> 00:08:17,180
powerful queries.

00:08:17,490 --> 00:08:23,160
Okay thanks everyone and I will see you at the next lecture or we're going to be discussing the like

00:08:23,300 --> 00:08:24,530
operator.

00:08:24,750 --> 00:08:26,580
Thanks and I'll see you there.